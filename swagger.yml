openapi: '3.0.0'
info:
  description: This is an API for managing projects in a database.
  version: 0.3.0
  title: Sypian Server API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  /category:
    post:
      tags:
        - category
      summary: Add a new category to the graph
      description: ''
      operationId: createCategory
      requestBody:
          description: Category object that needs to be added to the graph
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#components/schemas/nodeid'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'

  /category/{categoryId}:
    put:
      tags:
        - category
      summary: Update an existing category
      description: ''
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The node id of the category to update.
          schema:
            type: integer
            minimum: 1
      requestBody:
          description: Category object that needs to be added to the graph
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'

    get:
      tags:
        - category
      summary: Returns a category by its id
      description: Returns a single category
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The node id of the category to get.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'

    delete:
      tags:
        - category
      summary: Deletes a category
      description: ''
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The node id of the category to get.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'

  /project:
    post:
      tags:
        - project
      summary: Add a new project to the graph
      description: ''
      operationId: addProject
      requestBody:
          description: Project object that needs to be added to the graph
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input

    put:
      tags:
        - project
      summary: Update an existing project
      description: ''
      operationId: updateProject
      requestBody:
          description: Updated project object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid project supplied
        '404':
          description: Project not found

  '/project/{projectKey}':
    get:
      tags:
        - project
      summary: Get project by project Key
      description: ''
      operationId: getProjectByKey
      parameters:
        - name: projectKey
          in: path
          description: Key of project to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid projectname supplied
        '404':
          description: Project not found

    delete:
      tags:
        - project
      summary: Delete project
      description: ''
      operationId: deleteProject
      parameters:
        - name: projectKey
          in: path
          description: Key of project to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid projectname supplied
        '404':
          description: Project not found

  /relation:
    post:
      tags:
        - relation
      summary: Add a new relation to the graph
      description: ''
      operationId: addRelation
      requestBody:
          description: Relation object that needs to be added to the graph
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input

    put:
      tags:
        - relation
      summary: Update an existing relation
      description: ''
      operationId: updateRelation
      requestBody:
          description: Relation object that needs to be updated to the graph
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Relation identifier supplied
        '404':
          description: Relation not found
        '405':
          description: Validation exception

    get:
      tags:
        - relation
      summary: Find a relation
      description: Returns a single relation
      operationId: getRelationByQuery
      requestBody:
          description: Relation object that needs to be searched
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationSearch'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Relation not found
    delete:
      tags:
        - relation
      summary: Delete a relation
      description: ''
      operationId: deleteRelation
      requestBody:
          description: Relation object that needs to be deleted
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationSearch'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Relation not found

components:
  schemas:
    errors:
      type: array
      items:
        type: object
        properties:
          message:
            type: string
    nodeid:
      type: object
      properties:
        id:
          type: integer
    category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
